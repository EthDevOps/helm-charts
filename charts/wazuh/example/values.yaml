#! OUTDATED
wazuh:
  images:
    resources:
      requests:
        cpu: 700m
        memory: 2000Mi
      limits:
        memory: 4Gi
    worker_resources:
      requests:
        cpu: 1000m
        memory: 3Gi
      limits:
        memory: 4Gi
  worker_replicas: 3
  service:
    annotations:
      service.beta.kubernetes.io/aws-load-balancer-type: 'nlb'
      service.beta.kubernetes.io/aws-load-balancer-internal: 'true'
      service.beta.kubernetes.io/aws-load-balancer-cross-zone-load-balancing-enabled: 'true'
    workerType: LoadBalancer
    masterType: LoadBalancer
  api_config: |-
    access:
      max_login_attempts: 100
      block_time: 400
      max_request_per_minute: 2000
    logs:
       level: "debug2"
  local_internal_options_master: |-
    wazuh_modules.debug=2
  local_internal_options_worker: |-
    wazuh_modules.debug=2
  master_config: |-
    <!--
      Wazuh - Manager - Default configuration for ubuntu 16.04
      More info at: https://documentation.wazuh.com
      Mailing list: https://groups.google.com/forum/#!forum/wazuh

      Customization: TCP on port 1514
      Customization: Cluster mode enabled, master node
    -->
    <ossec_config>
      <global>
        <jsonout_output>yes</jsonout_output>
        <alerts_log>yes</alerts_log>
        <logall>no</logall>
        <logall_json>no</logall_json>
        <email_notification>no</email_notification>
        <smtp_server>smtp.example.wazuh.com</smtp_server>
        <email_from>ossecm@example.wazuh.com</email_from>
        <email_to>recipient@example.wazuh.com</email_to>
        <email_maxperhour>12</email_maxperhour>
        <email_log_source>alerts.log</email_log_source>
        <queue_size>131072</queue_size>
        <agents_disconnection_time>20s</agents_disconnection_time>
        <agents_disconnection_alert_time>100s</agents_disconnection_alert_time>
      </global>

      <alerts>
        <log_alert_level>0</log_alert_level>
        <email_alert_level>12</email_alert_level>
      </alerts>

      <!-- Choose between "plain", "json", or "plain,json" for the format of internal logs -->
      <logging>
        <log_format>plain</log_format>
      </logging>

      <remote>
        <connection>secure</connection>
        <port>1514</port>
        <protocol>tcp</protocol>
        <queue_size>131072</queue_size>
      </remote>

      <!-- Policy monitoring -->
      <rootcheck>
        <disabled>no</disabled>
        <check_unixaudit>yes</check_unixaudit>
        <check_files>yes</check_files>
        <check_trojans>yes</check_trojans>
        <check_dev>yes</check_dev>
        <check_sys>yes</check_sys>
        <check_pids>yes</check_pids>
        <check_ports>yes</check_ports>
        <check_if>yes</check_if>

        <!-- Frequency that rootcheck is executed - every 12 hours -->
        <frequency>43200</frequency>

        <rootkit_files>/var/ossec/etc/rootcheck/rootkit_files.txt</rootkit_files>
        <rootkit_trojans>/var/ossec/etc/rootcheck/rootkit_trojans.txt</rootkit_trojans>

        <system_audit>/var/ossec/etc/rootcheck/system_audit_rcl.txt</system_audit>
        <system_audit>/var/ossec/etc/rootcheck/system_audit_ssh.txt</system_audit>

        <skip_nfs>yes</skip_nfs>
      </rootcheck>

      <wodle name="open-scap">
        <disabled>yes</disabled>
        <timeout>1800</timeout>
        <interval>1d</interval>
        <scan-on-start>yes</scan-on-start>
      </wodle>

      <wodle name="cis-cat">
        <disabled>yes</disabled>
        <timeout>1800</timeout>
        <interval>1d</interval>
        <scan-on-start>yes</scan-on-start>

        <java_path>wodles/java</java_path>
        <ciscat_path>wodles/ciscat</ciscat_path>
      </wodle>

      <!-- Osquery integration -->
      <wodle name="osquery">
        <disabled>yes</disabled>
        <run_daemon>yes</run_daemon>
        <log_path>/var/log/osquery/osqueryd.results.log</log_path>
        <config_path>/etc/osquery/osquery.conf</config_path>
        <add_labels>yes</add_labels>
      </wodle>

      <!-- System inventory -->
      <wodle name="syscollector">
        <disabled>no</disabled>
        <interval>1h</interval>
        <scan_on_start>yes</scan_on_start>
        <hardware>yes</hardware>
        <os>yes</os>
        <network>yes</network>
        <packages>yes</packages>
        <ports all="no">yes</ports>
        <processes>yes</processes>
      </wodle>

      <vulnerability-detector>
        <enabled>yes</enabled>
        <interval>1d</interval>
        <min_full_scan_interval>12h</min_full_scan_interval>
        <run_on_start>yes</run_on_start>

        <!-- Ubuntu OS vulnerabilities -->
        <provider name="canonical">
          <enabled>yes</enabled>
          <os>trusty</os>
          <os>xenial</os>
          <os>bionic</os>
          <os>focal</os>
          <os>jammy</os>
          <update_interval>12h</update_interval>
        </provider>

        <!-- Debian OS vulnerabilities -->
        <provider name="debian">
          <enabled>yes</enabled>
          <os>buster</os>
          <os>bullseye</os>
          <update_interval>1h</update_interval>
        </provider>

        <!-- RedHat OS vulnerabilities -->
        <provider name="redhat">
          <enabled>yes</enabled>
          <os>5</os>
          <os>6</os>
          <os>7</os>
          <os>8</os>
          <os>9</os>
          <update_interval>12h</update_interval>
        </provider>

        <!-- Amazon Linux OS vulnerabilities -->
        <provider name="alas">
          <enabled>yes</enabled>
          <os>amazon-linux</os>
          <os>amazon-linux-2</os>
          <update_interval>1h</update_interval>
        </provider>

        <!-- Windows OS vulnerabilities -->
        <provider name="msu">
          <enabled>yes</enabled>
          <update_interval>12h</update_interval>
        </provider>

        <!-- SUSE Linux Enterprise OS vulnerabilities -->
        <provider name="suse">
          <enabled>no</enabled>
          <os>11-server</os>
          <os>11-desktop</os>
          <os>12-server</os>
          <os>12-desktop</os>
          <os>15-server</os>
          <os>15-desktop</os>
          <update_interval>1h</update_interval>
        </provider>

        <!-- Arch OS vulnerabilities -->
        <provider name="arch">
          <enabled>yes</enabled>
          <update_interval>1h</update_interval>
        </provider>

        <!-- Aggregate vulnerabilities -->
        <provider name="nvd">
           <enabled>yes</enabled>
           <update_interval>12h</update_interval>
        </provider>

      </vulnerability-detector>

      <!-- File integrity monitoring -->
      <syscheck>
        <disabled>no</disabled>

        <!-- Frequency that syscheck is executed default every 12 hours -->
        <frequency>43200</frequency>

        <scan_on_start>yes</scan_on_start>

        <!-- Generate alert when new file detected -->
        <alert_new_files>yes</alert_new_files>

        <!-- Don't ignore files that change more than 'frequency' times -->
        <auto_ignore frequency="10" timeframe="3600">no</auto_ignore>

        <!-- Directories to check  (perform all possible verifications) -->
        <directories check_all="yes">/etc,/usr/bin,/usr/sbin</directories>
        <directories check_all="yes">/bin,/sbin,/boot</directories>

        <!-- Files/directories to ignore -->
        <ignore>/etc/mtab</ignore>
        <ignore>/etc/hosts.deny</ignore>
        <ignore>/etc/mail/statistics</ignore>
        <ignore>/etc/random-seed</ignore>
        <ignore>/etc/random.seed</ignore>
        <ignore>/etc/adjtime</ignore>
        <ignore>/etc/httpd/logs</ignore>
        <ignore>/etc/utmpx</ignore>
        <ignore>/etc/wtmpx</ignore>
        <ignore>/etc/cups/certs</ignore>
        <ignore>/etc/dumpdates</ignore>
        <ignore>/etc/svc/volatile</ignore>
        <ignore>/sys/kernel/security</ignore>
        <ignore>/sys/kernel/debug</ignore>

        <!-- Check the file, but never compute the diff -->
        <nodiff>/etc/ssl/private.key</nodiff>

        <skip_nfs>yes</skip_nfs>

        <!-- Remove not monitored files -->
        <remove_old_diff>yes</remove_old_diff>

        <!-- Allow the system to restart Auditd after installing the plugin -->
        <restart_audit>yes</restart_audit>
      </syscheck>

      <!-- Active response -->
      <global>
        <white_list>127.0.0.1</white_list>
        <white_list>^localhost.localdomain$</white_list>
        <white_list>10.66.0.2</white_list>
      </global>

      <command>
        <name>disable-account</name>
        <executable>disable-account.sh</executable>
        <expect>user</expect>
        <timeout_allowed>yes</timeout_allowed>
      </command>

      <command>
        <name>restart-ossec</name>
        <executable>restart-ossec.sh</executable>
        <expect></expect>
      </command>

      <command>
        <name>firewall-drop</name>
        <executable>firewall-drop</executable>
        <timeout_allowed>yes</timeout_allowed>
      </command>

      <command>
        <name>host-deny</name>
        <executable>host-deny.sh</executable>
        <expect>srcip</expect>
        <timeout_allowed>yes</timeout_allowed>
      </command>

      <command>
        <name>route-null</name>
        <executable>route-null.sh</executable>
        <expect>srcip</expect>
        <timeout_allowed>yes</timeout_allowed>
      </command>

      <command>
        <name>win_route-null</name>
        <executable>route-null.cmd</executable>
        <expect>srcip</expect>
        <timeout_allowed>yes</timeout_allowed>
      </command>

      <command>
        <name>win_route-null-2012</name>
        <executable>route-null-2012.cmd</executable>
        <expect>srcip</expect>
        <timeout_allowed>yes</timeout_allowed>
      </command>

      <command>
        <name>netsh</name>
        <executable>netsh.cmd</executable>
        <expect>srcip</expect>
        <timeout_allowed>yes</timeout_allowed>
      </command>

      <command>
        <name>netsh-win-2016</name>
        <executable>netsh-win-2016.cmd</executable>
        <expect>srcip</expect>
        <timeout_allowed>yes</timeout_allowed>
      </command>

      <!--
      <active-response>
        active-response options here
      </active-response>
      -->

      <!-- Log analysis -->
      <localfile>
        <log_format>command</log_format>
        <command>df -P</command>
        <frequency>360</frequency>
      </localfile>

      <localfile>
        <log_format>full_command</log_format>
        <command>netstat -tulpn | sed 's/\([[:alnum:]]\+\)\ \+[[:digit:]]\+\ \+[[:digit:]]\+\ \+\(.*\):\([[:digit:]]*\)\ \+\([0-9\.\:\*]\+\).\+\ \([[:digit:]]*\/[[:alnum:]\-]*\).*/\1 \2 == \3 == \4 \5/' | sort -k 4 -g | sed 's/ == \(.*\) ==/:\1/' | sed 1,2d</command>
        <alias>netstat listening ports</alias>
        <frequency>360</frequency>
      </localfile>

      <localfile>
        <log_format>full_command</log_format>
        <command>last -n 20</command>
        <frequency>360</frequency>
      </localfile>

      <ruleset>
        <!-- Default ruleset -->
        <decoder_dir>ruleset/decoders</decoder_dir>
        <rule_dir>ruleset/rules</rule_dir>
        <rule_exclude>0215-policy_rules.xml</rule_exclude>
        <list>etc/lists/audit-keys</list>
        <list>etc/lists/amazon/aws-sources</list>
        <list>etc/lists/amazon/aws-eventnames</list>

        <!-- User-defined ruleset -->
        <decoder_dir>etc/decoders</decoder_dir>
        <rule_dir>etc/rules</rule_dir>
      </ruleset>

      <rule_test>
    	    <enabled>yes</enabled>
    	    <threads>1</threads>
    	    <max_sessions>64</max_sessions>
    	    <session_timeout>15m</session_timeout>
      </rule_test>

      <!-- Configuration for ossec-authd
        To enable this service, run:
        wazuh-control enable auth
      -->
      <auth>
        <disabled>no</disabled>
        <port>1515</port>
        <use_source_ip>no</use_source_ip>
        <force>
          <enabled>yes</enabled>
          <key_mismatch>yes</key_mismatch>
          <disconnected_time enabled="yes">1h</disconnected_time>
          <after_registration_time>1h</after_registration_time>
        </force>
        <purge>no</purge>
        <use_password>yes</use_password>
        <ciphers>HIGH:!ADH:!EXP:!MD5:!RC4:!3DES:!CAMELLIA:@STRENGTH</ciphers>
        <!-- <ssl_agent_ca></ssl_agent_ca> -->
        <ssl_verify_host>no</ssl_verify_host>
        <ssl_manager_cert>/var/ossec/etc/sslmanager.cert</ssl_manager_cert>
        <ssl_manager_key>/var/ossec/etc/sslmanager.key</ssl_manager_key>
        <ssl_auto_negotiate>no</ssl_auto_negotiate>
      </auth>

      <cluster>
        <name>wazuh</name>
        <node_name>wazuh-manager-master-0</node_name>
        <node_type>master</node_type>
        <key>c98b62a9b6169ac5f67dae55ae4a9088</key>
        <port>1516</port>
        <bind_addr>0.0.0.0</bind_addr>
        <nodes>
            <node>wazuh-manager-master-0</node>
        </nodes>
        <hidden>no</hidden>
        <disabled>no</disabled>
      </cluster>
      <localfile>
        <log_format>syslog</log_format>
        <location>/var/ossec/logs/active-responses.log</location>
      </localfile>
      <localfile>
        <log_format>syslog</log_format>
        <location>/var/log/syslog</location>
      </localfile>
      <localfile>
        <log_format>syslog</log_format>
        <location>/var/log/dpkg.log</location>
      </localfile>
    </ossec_config>

  worker_config: |-
    <!--
      Wazuh - Manager - Default configuration for ubuntu 16.04
      More info at: https://documentation.wazuh.com
      Mailing list: https://groups.google.com/forum/#!forum/wazuh

      Customization: TCP on port 1514
      Customization: Cluster mode enabled, worker node
    -->
    <ossec_config>
      <global>
        <jsonout_output>yes</jsonout_output>
        <alerts_log>yes</alerts_log>
        <logall>no</logall>
        <logall_json>no</logall_json>
        <email_notification>no</email_notification>
        <smtp_server>smtp.example.wazuh.com</smtp_server>
        <email_from>ossecm@example.wazuh.com</email_from>
        <email_to>recipient@example.wazuh.com</email_to>
        <email_maxperhour>12</email_maxperhour>
        <email_log_source>alerts.log</email_log_source>
        <queue_size>131072</queue_size>
        <agents_disconnection_time>20s</agents_disconnection_time>
        <agents_disconnection_alert_time>100s</agents_disconnection_alert_time>
      </global>

      <alerts>
        <log_alert_level>0</log_alert_level>
        <email_alert_level>12</email_alert_level>
      </alerts>

      <!-- Choose between "plain", "json", or "plain,json" for the format of internal logs -->
      <logging>
        <log_format>plain</log_format>
      </logging>

      <remote>
        <connection>secure</connection>
        <port>1514</port>
        <protocol>tcp</protocol>
        <queue_size>131072</queue_size>
      </remote>

      <!-- Policy monitoring -->
      <rootcheck>
        <disabled>no</disabled>
        <check_unixaudit>yes</check_unixaudit>
        <check_files>yes</check_files>
        <check_trojans>yes</check_trojans>
        <check_dev>yes</check_dev>
        <check_sys>yes</check_sys>
        <check_pids>yes</check_pids>
        <check_ports>yes</check_ports>
        <check_if>yes</check_if>

        <!-- Frequency that rootcheck is executed - every 12 hours -->
        <frequency>43200</frequency>

        <rootkit_files>/var/ossec/etc/rootcheck/rootkit_files.txt</rootkit_files>
        <rootkit_trojans>/var/ossec/etc/rootcheck/rootkit_trojans.txt</rootkit_trojans>

        <system_audit>/var/ossec/etc/rootcheck/system_audit_rcl.txt</system_audit>
        <system_audit>/var/ossec/etc/rootcheck/system_audit_ssh.txt</system_audit>

        <skip_nfs>yes</skip_nfs>
      </rootcheck>

      <wodle name="open-scap">
        <disabled>yes</disabled>
        <timeout>1800</timeout>
        <interval>1d</interval>
        <scan-on-start>yes</scan-on-start>
      </wodle>

      <wodle name="cis-cat">
        <disabled>yes</disabled>
        <timeout>1800</timeout>
        <interval>1d</interval>
        <scan-on-start>yes</scan-on-start>

        <java_path>wodles/java</java_path>
        <ciscat_path>wodles/ciscat</ciscat_path>
      </wodle>

      <!-- Osquery integration -->
      <wodle name="osquery">
        <disabled>yes</disabled>
        <run_daemon>yes</run_daemon>
        <log_path>/var/log/osquery/osqueryd.results.log</log_path>
        <config_path>/etc/osquery/osquery.conf</config_path>
        <add_labels>yes</add_labels>
      </wodle>

      <!-- System inventory -->
      <wodle name="syscollector">
        <disabled>no</disabled>
        <interval>1h</interval>
        <scan_on_start>yes</scan_on_start>
        <hardware>yes</hardware>
        <os>yes</os>
        <network>yes</network>
        <packages>yes</packages>
        <ports all="no">yes</ports>
        <processes>yes</processes>
      </wodle>

      <vulnerability-detector>
        <enabled>yes</enabled>
        <interval>1d</interval>
        <min_full_scan_interval>12h</min_full_scan_interval>
        <run_on_start>yes</run_on_start>

        <!-- Ubuntu OS vulnerabilities -->
        <provider name="canonical">
          <enabled>yes</enabled>
          <os>trusty</os>
          <os>xenial</os>
          <os>bionic</os>
          <os>focal</os>
          <os>jammy</os>
          <update_interval>12h</update_interval>
        </provider>

        <!-- Debian OS vulnerabilities -->
        <provider name="debian">
          <enabled>yes</enabled>
          <os>buster</os>
          <os>bullseye</os>
          <update_interval>1h</update_interval>
        </provider>

        <!-- RedHat OS vulnerabilities -->
        <provider name="redhat">
          <enabled>yes</enabled>
          <os>5</os>
          <os>6</os>
          <os>7</os>
          <os>8</os>
          <os>9</os>
          <update_interval>12h</update_interval>
        </provider>

        <!-- Amazon Linux OS vulnerabilities -->
        <provider name="alas">
          <enabled>yes</enabled>
          <os>amazon-linux</os>
          <os>amazon-linux-2</os>
          <update_interval>1h</update_interval>
        </provider>

        <!-- Windows OS vulnerabilities -->
        <provider name="msu">
          <enabled>yes</enabled>
          <update_interval>12h</update_interval>
        </provider>

        <!-- SUSE Linux Enterprise OS vulnerabilities -->
        <provider name="suse">
          <enabled>no</enabled>
          <os>11-server</os>
          <os>11-desktop</os>
          <os>12-server</os>
          <os>12-desktop</os>
          <os>15-server</os>
          <os>15-desktop</os>
          <update_interval>1h</update_interval>
        </provider>

        <!-- Arch OS vulnerabilities -->
        <provider name="arch">
          <enabled>yes</enabled>
          <update_interval>1h</update_interval>
        </provider>

        <!-- Aggregate vulnerabilities -->
        <provider name="nvd">
           <enabled>yes</enabled>
           <update_interval>12h</update_interval>
        </provider>

      </vulnerability-detector>

      <!-- File integrity monitoring -->
      <syscheck>
        <disabled>no</disabled>

        <!-- Frequency that syscheck is executed default every 12 hours -->
        <frequency>43200</frequency>

        <scan_on_start>yes</scan_on_start>

        <!-- Generate alert when new file detected -->
        <alert_new_files>yes</alert_new_files>

        <!-- Don't ignore files that change more than 'frequency' times -->
        <auto_ignore frequency="10" timeframe="3600">no</auto_ignore>

        <!-- Directories to check  (perform all possible verifications) -->
        <directories check_all="yes">/etc,/usr/bin,/usr/sbin</directories>
        <directories check_all="yes">/bin,/sbin,/boot</directories>

        <!-- Files/directories to ignore -->
        <ignore>/etc/mtab</ignore>
        <ignore>/etc/hosts.deny</ignore>
        <ignore>/etc/mail/statistics</ignore>
        <ignore>/etc/random-seed</ignore>
        <ignore>/etc/random.seed</ignore>
        <ignore>/etc/adjtime</ignore>
        <ignore>/etc/httpd/logs</ignore>
        <ignore>/etc/utmpx</ignore>
        <ignore>/etc/wtmpx</ignore>
        <ignore>/etc/cups/certs</ignore>
        <ignore>/etc/dumpdates</ignore>
        <ignore>/etc/svc/volatile</ignore>
        <ignore>/sys/kernel/security</ignore>
        <ignore>/sys/kernel/debug</ignore>

        <!-- Check the file, but never compute the diff -->
        <nodiff>/etc/ssl/private.key</nodiff>

        <skip_nfs>yes</skip_nfs>

        <!-- Remove not monitored files -->
        <remove_old_diff>yes</remove_old_diff>

        <!-- Allow the system to restart Auditd after installing the plugin -->
        <restart_audit>yes</restart_audit>
      </syscheck>

      <!-- Active response -->
      <global>
        <white_list>127.0.0.1</white_list>
        <white_list>^localhost.localdomain$</white_list>
        <white_list>10.66.0.2</white_list>
      </global>

      <command>
        <name>disable-account</name>
        <executable>disable-account.sh</executable>
        <expect>user</expect>
        <timeout_allowed>yes</timeout_allowed>
      </command>

      <command>
        <name>restart-ossec</name>
        <executable>restart-ossec.sh</executable>
        <expect></expect>
      </command>

      <command>
        <name>firewall-drop</name>
        <executable>firewall-drop</executable>
        <timeout_allowed>yes</timeout_allowed>
      </command>

      <command>
        <name>host-deny</name>
        <executable>host-deny.sh</executable>
        <expect>srcip</expect>
        <timeout_allowed>yes</timeout_allowed>
      </command>

      <command>
        <name>route-null</name>
        <executable>route-null.sh</executable>
        <expect>srcip</expect>
        <timeout_allowed>yes</timeout_allowed>
      </command>

      <command>
        <name>win_route-null</name>
        <executable>route-null.cmd</executable>
        <expect>srcip</expect>
        <timeout_allowed>yes</timeout_allowed>
      </command>

      <command>
        <name>win_route-null-2012</name>
        <executable>route-null-2012.cmd</executable>
        <expect>srcip</expect>
        <timeout_allowed>yes</timeout_allowed>
      </command>

      <command>
        <name>netsh</name>
        <executable>netsh.cmd</executable>
        <expect>srcip</expect>
        <timeout_allowed>yes</timeout_allowed>
      </command>

      <command>
        <name>netsh-win-2016</name>
        <executable>netsh-win-2016.cmd</executable>
        <expect>srcip</expect>
        <timeout_allowed>yes</timeout_allowed>
      </command>

      <!--
      <active-response>
        active-response options here
      </active-response>
      -->

      <!-- Log analysis -->
      <localfile>
        <log_format>command</log_format>
        <command>df -P</command>
        <frequency>360</frequency>
      </localfile>

      <localfile>
        <log_format>full_command</log_format>
        <command>netstat -tulpn | sed 's/\([[:alnum:]]\+\)\ \+[[:digit:]]\+\ \+[[:digit:]]\+\ \+\(.*\):\([[:digit:]]*\)\ \+\([0-9\.\:\*]\+\).\+\ \([[:digit:]]*\/[[:alnum:]\-]*\).*/\1 \2 == \3 == \4 \5/' | sort -k 4 -g | sed 's/ == \(.*\) ==/:\1/' | sed 1,2d</command>
        <alias>netstat listening ports</alias>
        <frequency>360</frequency>
      </localfile>

      <localfile>
        <log_format>full_command</log_format>
        <command>last -n 20</command>
        <frequency>360</frequency>
      </localfile>

      <ruleset>
        <!-- Default ruleset -->
        <decoder_dir>ruleset/decoders</decoder_dir>
        <rule_dir>ruleset/rules</rule_dir>
        <rule_exclude>0215-policy_rules.xml</rule_exclude>
        <list>etc/lists/audit-keys</list>
        <list>etc/lists/amazon/aws-sources</list>
        <list>etc/lists/amazon/aws-eventnames</list>

        <!-- User-defined ruleset -->
        <decoder_dir>etc/decoders</decoder_dir>
        <rule_dir>etc/rules</rule_dir>
      </ruleset>

      <rule_test>
    	    <enabled>yes</enabled>
    	    <threads>1</threads>
    	    <max_sessions>64</max_sessions>
    	    <session_timeout>15m</session_timeout>
      </rule_test>

      <!-- Configuration for ossec-authd
        To enable this service, run:
        wazuh-control enable auth
      -->
      <auth>
        <disabled>no</disabled>
        <port>1515</port>
        <use_source_ip>no</use_source_ip>
        <force>
          <enabled>yes</enabled>
          <key_mismatch>yes</key_mismatch>
          <disconnected_time enabled="yes">1h</disconnected_time>
          <after_registration_time>1h</after_registration_time>
        </force>
        <purge>no</purge>
        <use_password>no</use_password>
        <ciphers>HIGH:!ADH:!EXP:!MD5:!RC4:!3DES:!CAMELLIA:@STRENGTH</ciphers>
        <!-- <ssl_agent_ca></ssl_agent_ca> -->
        <ssl_verify_host>no</ssl_verify_host>
        <ssl_manager_cert>/var/ossec/etc/sslmanager.cert</ssl_manager_cert>
        <ssl_manager_key>/var/ossec/etc/sslmanager.key</ssl_manager_key>
        <ssl_auto_negotiate>no</ssl_auto_negotiate>
      </auth>

      <cluster>
        <name>wazuh</name>
        <node_name>wazuh-manager-worker-0</node_name>
        <node_type>worker</node_type>
        <key>c98b62a9b6169ac5f67dae55ae4a9088</key>
        <port>1516</port>
        <bind_addr>0.0.0.0</bind_addr>
        <nodes>
            <node>wazuh-manager-worker-0</node>
        </nodes>
        <hidden>no</hidden>
        <disabled>no</disabled>
      </cluster>

      <localfile>
        <log_format>syslog</log_format>
        <location>/var/ossec/logs/active-responses.log</location>
      </localfile>

      <localfile>
        <log_format>syslog</log_format>
        <location>/var/log/syslog</location>
      </localfile>

      <localfile>
        <log_format>syslog</log_format>
        <location>/var/log/dpkg.log</location>
      </localfile>
    </ossec_config>

  mastercustom_config: |-
    <!-- Shuffle Integration -->
      <integration>
        <name>shuffle</name>
        <hook_url>https://shuffler.io/api/v1/hooks/webhook_xxxxxxxx</hook_url>
        <level>8</level>
        <alert_format>json</alert_format>
      </integration>
    <!-- AWS Integration -->
      <wodle name="aws-s3">
        <disabled>no</disabled>
        <interval>5m</interval>
        <run_on_start>yes</run_on_start>
        <skip_on_error>yes</skip_on_error>
        <bucket type="cloudtrail">
          <name>arm-cloudtrail-eu-central-1</name>
        </bucket>
        <bucket type="waf">
            <name>aws-waf-logs-070</name>
            <path>AWSLogs/0000000000/WAFLogs/eu-central-1/xxxxxxxxx/</path>
        </bucket>
        <bucket type="waf">
            <name>aws-waf-logs-080</name>
            <path>AWSLogs/0000000000/WAFLogs/eu-central-1/xxxxxxxxx/</path>
        </bucket>
      </wodle>
  workercustom_config: |-
    <!-- Shuffle Integration -->
      <integration>
        <name>shuffle</name>
        <hook_url>https://shuffler.io/api/v1/hooks/webhook_xxxxxx</hook_url>
        <level>8</level>
        <alert_format>json</alert_format>
      </integration>
    <!-- AWS Integration -->
      <wodle name="aws-s3">
        <disabled>no</disabled>
        <interval>5m</interval>
        <run_on_start>yes</run_on_start>
        <skip_on_error>yes</skip_on_error>
        <bucket type="cloudtrail">
          <name>arm-cloudtrail-eu-central-1</name>
        </bucket>
        <bucket type="waf">
            <name>aws-waf-logs-070</name>
            <path>AWSLogs/0000000000/WAFLogs/eu-central-1/xxxxxxxxx/</path>
        </bucket>
        <bucket type="waf">
            <name>aws-waf-logs-080</name>
            <path>AWSLogs/0000000000/WAFLogs/eu-central-1/xxxxxxxxx/</path>
        </bucket>
      </wodle>
serviceAccount:
  create: true
  annotations:
    eks.amazonaws.com/role-arn: arn:aws:iam::xxxxxxx:role/k8s-sa-monitoring-wazuh

dashboard:
  env:
    INDEXER_URL: https://wazuh-sand-indexer-rest:9200
    WAZUH_API_URL: https://wazuh-manager-master-0.wazuh-sand-cluster
  opensearch_dashboards_addon: |-
    opensearch_security.auth.type: ["basicauth","saml"]
    opensearch_security.auth.multiple_auth_enabled: true
    server.xsrf.allowlist: ["/_plugins/_security/saml/acs", "/_plugins/_security/saml/logout","/_opendistro/_security/saml/logout", "/_opendistro/_security/api/authtoken", "/_opendistro/_security/saml/acs", "/_opendistro/_security/saml/acs/idpinitiated", "/_plugins/_security/api/authtoken"]
    opensearch_security.session.keepalive: false
ingress:
  enabled: true
  annotations:
    kubernetes.io/ingress.class: "nginx"
    nginx.org/proxy-buffers: "8 32768k"
    nginx.org/proxy-buffer-size: "16384k"
  host: "wazuh.example.com"

indexer:
  images:
    resources:
      requests:
        cpu: 700m
        memory: 4Gi
      limits:
        memory: 5Gi

  storageSize: 100Gi

  env:
    OPENSEARCH_JAVA_OPTS: "-Xms4g -Xmx4g -Dlog4j2.formatMsgNoLookups=true"
# For get hashes you can run docker run --rm -ti wazuh/wazuh-indexer:4.3.9 bash /usr/share/wazuh-indexer/plugins/opensearch-security/tools/hash.sh
# also after it you should update secrets
  internal_users: |
    ---

    _meta:
      type: "internalusers"
      config_version: 2

    admin:
      hash: "xxx"
      reserved: true
      backend_roles:
      - "admin"
      description: "admin user"

    kibanaserver:
      hash: "xxx"
      reserved: true
      description: "kibanaserver user"

    kibanaro:
      hash: "xxx"
      reserved: false
      backend_roles:
      - "kibanauser"
      - "readall"
      attributes:
        attribute1: "value1"
        attribute2: "value2"
        attribute3: "value3"
      description: "Demo kibanaro user"

    logstash:
      hash: "xxx"
      reserved: false
      backend_roles:
      - "logstash"
      description: "Demo logstash user"

    readall:
      hash: "xxx"
      reserved: false
      backend_roles:
      - "readall"
      description: "Demo readall user"

    snapshotrestore:
      hash: "xxxx"
      reserved: false
      backend_roles:
      - "snapshotrestore"
      description: "Demo snapshotrestore user"
  roles_mapping: |
    ---

    _meta:
      type: "rolesmapping"
      config_version: 2

    all_access:
      reserved: false
      backend_roles:
      - "admin"
      - "wazuh-admin"
      description: "Maps admin to all_access"

    own_index:
      reserved: false
      users:
      - "*"
      description: "Allow full access to an index named like the username"

    logstash:
      reserved: false
      backend_roles:
      - "logstash"

    kibana_user:
      reserved: false
      backend_roles:
      - "kibanauser"
      users:
      - "wazuh_user"
      - "wazuh_admin"
      description: "Maps kibanauser to kibana_user"

    readall:
      reserved: false
      backend_roles:
      - "readall"

    manage_snapshots:
      reserved: false
      backend_roles:
      - "snapshotrestore"

    kibana_server:
      reserved: true
      users:
      - "kibanaserver"

    wazuh_ui_admin:
      reserved: true
      hidden: false
      backend_roles: []
      hosts: []
      users:
      - "wazuh_admin"
      - "kibanaserver"
      and_backend_roles: []

    wazuh_ui_user:
      reserved: true
      hidden: false
      backend_roles: []
      hosts: []
      users:
      - "wazuh_user"
      and_backend_roles: []
  config: |
    ---

    _meta:
      type: "config"
      config_version: 2

    config:
      dynamic:
        http:
          anonymous_auth_enabled: false
          xff:
            enabled: false
            internalProxies: '192\.168\.0\.10|192\.168\.0\.11' # regex pattern
        authc:
          kerberos_auth_domain:
            http_enabled: false
            transport_enabled: false
            order: 6
            http_authenticator:
              type: kerberos
              challenge: true
              config:
                krb_debug: false
                strip_realm_from_principal: true
            authentication_backend:
              type: noop
          basic_internal_auth_domain:
            description: "Authenticate via HTTP Basic against internal users database"
            http_enabled: true
            transport_enabled: true
            order: 0
            http_authenticator:
              type: basic
              challenge: false
            authentication_backend:
              type: intern
          saml_auth_domain:
            http_enabled: true
            transport_enabled: false
            order: 1
            http_authenticator:
              type: saml
              challenge: true
              config:
                idp:
                  enable_ssl: true
                  verify_hostnames: false
                  metadata_url: https://sts.example.com/FederationMetadata/2007-06/FederationMetadata.xml
                  #metadata_file: /usr/share/wazuh-indexer/opensearch-security/FederationMetadata.xml
                  entity_id: http://sts.example.com/adfs/services/trust
                sp:
                  entity_id: wazuh-admin
                kibana_url: https://wazuh.example.org/
                roles_key: Roles
                exchange_key: XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX
            authentication_backend:
              type: noop
          proxy_auth_domain:
            description: "Authenticate via proxy"
            http_enabled: false
            transport_enabled: false
            order: 3
            http_authenticator:
              type: proxy
              challenge: false
              config:
                user_header: "x-proxy-user"
                roles_header: "x-proxy-roles"
            authentication_backend:
              type: noop
          jwt_auth_domain:
            description: "Authenticate via Json Web Token"
            http_enabled: false
            transport_enabled: false
            order: 0
            http_authenticator:
              type: jwt
              challenge: false
              config:
                signing_key: "base64 encoded HMAC key or public RSA/ECDSA pem key"
                jwt_header: "Authorization"
                jwt_url_parameter: null
                roles_key: null
                subject_key: null
            authentication_backend:
              type: noop
          clientcert_auth_domain:
            description: "Authenticate via SSL client certificates"
            http_enabled: false
            transport_enabled: false
            order: 2
            http_authenticator:
              type: clientcert
              config:
                username_attribute: cn #optional, if omitted DN becomes username
              challenge: false
            authentication_backend:
              type: noop
          ldap:
            description: "Authenticate via LDAP or Active Directory"
            http_enabled: false
            transport_enabled: false
            order: 5
            http_authenticator:
              type: basic
              challenge: false
            authentication_backend:
              type: ldap
              config:
                enable_ssl: false
                enable_start_tls: false
                enable_ssl_client_auth: false
                verify_hostnames: true
                hosts:
                - localhost:8389
                bind_dn: null
                password: null
                userbase: 'ou=people,dc=example,dc=com'
                usersearch: '(sAMAccountName={0})'
                username_attribute: null
        authz:
          roles_from_myldap:
            description: "Authorize via LDAP or Active Directory"
            http_enabled: false
            transport_enabled: false
            authorization_backend:
              type: ldap
              config:
                enable_ssl: false
                enable_start_tls: false
                enable_ssl_client_auth: false
                verify_hostnames: true
                hosts:
                - localhost:8389
                bind_dn: null
                password: null
                rolebase: 'ou=groups,dc=example,dc=com'
                rolesearch: '(member={0})'
                userroleattribute: null
                userrolename: disabled
                rolename: cn
                resolve_nested_roles: true
                userbase: 'ou=people,dc=example,dc=com'
                usersearch: '(uid={0})'
          roles_from_another_ldap:
            description: "Authorize via another Active Directory"
            http_enabled: false
            transport_enabled: false
            authorization_backend:
              type: ldap
