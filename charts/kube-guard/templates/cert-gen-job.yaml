{{- if and .Values.webhook.tls.enabled (not .Values.webhook.tls.provided) }}
apiVersion: batch/v1
kind: Job
metadata:
  name: {{ include "kube-guard.fullname" . }}-cert-gen
  labels:
    {{- include "kube-guard.labels" . | nindent 4 }}
  annotations:
    "helm.sh/hook": pre-install,pre-upgrade
    "helm.sh/hook-weight": "1"
    "helm.sh/hook-delete-policy": hook-succeeded,before-hook-creation
spec:
  template:
    metadata:
      name: {{ include "kube-guard.fullname" . }}-cert-gen
      labels:
        {{- include "kube-guard.selectorLabels" . | nindent 8 }}
    spec:
      restartPolicy: OnFailure
      serviceAccountName: {{ include "kube-guard.serviceAccountName" . }}
      containers:
      - name: cert-generator
        image: alpine/openssl:latest
        command:
        - /bin/sh
        - -c
        - |
          set -e

          # Install kubectl
          apk add --no-cache curl
          curl -LO "https://dl.k8s.io/release/$(curl -L -s https://dl.k8s.io/release/stable.txt)/bin/linux/amd64/kubectl"
          chmod +x kubectl
          mv kubectl /usr/local/bin/

          SERVICE_NAME="{{ .Values.service.name | default (printf "%s-webhook" (include "kube-guard.fullname" .)) }}"
          NAMESPACE="{{ .Release.Namespace }}"
          SECRET_NAME="{{ .Values.webhook.tls.secretName | default (printf "%s-tls" (include "kube-guard.fullname" .)) }}"

          # Generate CA private key
          openssl genrsa -out /tmp/ca.key 2048

          # Generate CA certificate
          openssl req -new -x509 -key /tmp/ca.key -out /tmp/ca.crt -days 365 \
            -subj "/CN=kube-guard-ca" \
            -extensions v3_ca \
            -config <(echo "[req]"; echo "distinguished_name=req"; echo "[v3_ca]"; echo "basicConstraints=CA:TRUE"; echo "keyUsage=keyCertSign,cRLSign")

          # Generate server private key
          openssl genrsa -out /tmp/tls.key 2048

          # Create server certificate config
          cat <<EOF > /tmp/server.conf
          [req]
          req_extensions = v3_req
          distinguished_name = req_distinguished_name
          prompt = no
          [req_distinguished_name]
          CN = $SERVICE_NAME.$NAMESPACE.svc
          [v3_req]
          basicConstraints = CA:FALSE
          keyUsage = digitalSignature, keyEncipherment
          extendedKeyUsage = serverAuth
          subjectAltName = @alt_names
          [alt_names]
          DNS.1 = $SERVICE_NAME
          DNS.2 = $SERVICE_NAME.$NAMESPACE
          DNS.3 = $SERVICE_NAME.$NAMESPACE.svc
          DNS.4 = $SERVICE_NAME.$NAMESPACE.svc.cluster.local
          EOF

          # Generate server certificate signing request
          openssl req -new -key /tmp/tls.key -out /tmp/server.csr -config /tmp/server.conf

          # Sign server certificate with CA
          openssl x509 -req -in /tmp/server.csr -CA /tmp/ca.crt -CAkey /tmp/ca.key -CAcreateserial \
            -out /tmp/tls.crt -days 365 -extensions v3_req -extfile /tmp/server.conf

          # Verify certificate was created
          if [ ! -s /tmp/tls.crt ]; then
            echo "Failed to generate certificate"
            exit 1
          fi

          echo "Self-signed certificate generated successfully"

          # Create or update the TLS secret with server certificate
          kubectl create secret tls $SECRET_NAME \
            --cert=/tmp/tls.crt \
            --key=/tmp/tls.key \
            --namespace=$NAMESPACE \
            --dry-run=client -o yaml | kubectl apply -f -

          # Create or update the CA secret for webhook configuration
          kubectl create secret generic ${SECRET_NAME}-ca \
            --from-file=ca.crt=/tmp/ca.crt \
            --namespace=$NAMESPACE \
            --dry-run=client -o yaml | kubectl apply -f -

          echo "TLS certificate generated and stored in secret $SECRET_NAME"

        volumeMounts:
        - name: temp
          mountPath: /tmp

        resources:
          limits:
            cpu: 200m
            memory: 128Mi
          requests:
            cpu: 100m
            memory: 64Mi

      volumes:
      - name: temp
        emptyDir: {}
{{- end }}
