apiVersion: apps/v1
kind: StatefulSet
metadata:
  name: {{ include "postgresql.fullname" . }}
  labels:
    {{- include "postgresql.labels" . | nindent 4 }}
spec:
  serviceName: {{ include "postgresql.fullname" . }}
  replicas: 1
  selector:
    matchLabels:
      {{- include "postgresql.selectorLabels" . | nindent 6 }}
  template:
    metadata:
      labels:
        {{- include "postgresql.selectorLabels" . | nindent 8 }}
    spec:
      {{- if .Values.serviceAccount.create }}
      serviceAccountName: {{ include "postgresql.serviceAccountName" . }}
      {{- end }}
      securityContext:
        {{- toYaml .Values.podSecurityContext | nindent 8 }}
      containers:
        - name: postgresql
          securityContext:
            {{- toYaml .Values.securityContext | nindent 12 }}
            {{- if .Values.securityContext.capabilities }}
            capabilities:
              {{- toYaml .Values.securityContext.capabilities | nindent 14 }}
            {{- end }}
          image: {{ include "postgresql.image" . }}
          imagePullPolicy: {{ .Values.image.pullPolicy }}
          ports:
            - name: tcp-postgresql
              containerPort: 5432
              protocol: TCP
          env:
            - name: PGDATA
              value: "/var/lib/postgresql/data/pgdata"
            {{- if .Values.auth.postgresPassword }}
            - name: POSTGRES_PASSWORD
              valueFrom:
                secretKeyRef:
                  name: {{ include "postgresql.secretName" . }}
                  key: {{ include "postgresql.adminPasswordKey" . }}
            {{- end }}
            {{- if .Values.auth.username }}
            - name: POSTGRES_USER
              value: {{ .Values.auth.username | quote }}
            {{- if .Values.auth.password }}
            - name: POSTGRES_PASSWORD
              valueFrom:
                secretKeyRef:
                  name: {{ include "postgresql.secretName" . }}
                  key: {{ include "postgresql.userPasswordKey" . }}
            {{- end }}
            {{- end }}
            {{- if .Values.auth.database }}
            - name: POSTGRES_DB
              value: {{ .Values.auth.database | quote }}
            {{- end }}
            - name: POSTGRES_INITDB_ARGS
              value: "--auth-host=scram-sha-256 --auth-local=scram-sha-256"
          {{- if .Values.livenessProbe.enabled }}
          livenessProbe:
            failureThreshold: {{ .Values.livenessProbe.failureThreshold }}
            initialDelaySeconds: {{ .Values.livenessProbe.initialDelaySeconds }}
            periodSeconds: {{ .Values.livenessProbe.periodSeconds }}
            successThreshold: {{ .Values.livenessProbe.successThreshold }}
            timeoutSeconds: {{ .Values.livenessProbe.timeoutSeconds }}
            exec:
              command:
                - /bin/sh
                - -c
                - exec pg_isready -U {{ .Values.auth.username | default "postgres" | quote }} -h 127.0.0.1 -p 5432
          {{- end }}
          {{- if .Values.readinessProbe.enabled }}
          readinessProbe:
            failureThreshold: {{ .Values.readinessProbe.failureThreshold }}
            initialDelaySeconds: {{ .Values.readinessProbe.initialDelaySeconds }}
            periodSeconds: {{ .Values.readinessProbe.periodSeconds }}
            successThreshold: {{ .Values.readinessProbe.successThreshold }}
            timeoutSeconds: {{ .Values.readinessProbe.timeoutSeconds }}
            exec:
              command:
                - /bin/sh
                - -c
                - -e
                - |
                  exec pg_isready -U {{ .Values.auth.username | default "postgres" | quote }} -h 127.0.0.1 -p 5432
          {{- end }}
          resources:
            {{- toYaml .Values.resources | nindent 12 }}
          volumeMounts:
            - name: dshm
              mountPath: /dev/shm
            {{- if .Values.persistence.enabled }}
            - name: {{ .Values.persistence.volumeName }}
              mountPath: /var/lib/postgresql/data
              {{- if .Values.persistence.subPath }}
              subPath: {{ .Values.persistence.subPath }}
              {{- end }}
            {{- end }}
      volumes:
        - name: dshm
          emptyDir:
            medium: Memory
        {{- if not .Values.persistence.enabled }}
        - name: {{ .Values.persistence.volumeName }}
          emptyDir: {}
        {{- end }}
      {{- with .Values.nodeSelector }}
      nodeSelector:
        {{- toYaml . | nindent 8 }}
      {{- end }}
      {{- with .Values.affinity }}
      affinity:
        {{- toYaml . | nindent 8 }}
      {{- end }}
      {{- with .Values.tolerations }}
      tolerations:
        {{- toYaml . | nindent 8 }}
      {{- end }}
  {{- if and .Values.persistence.enabled (not .Values.persistence.existingClaim) }}
  volumeClaimTemplates:
    - apiVersion: v1
      kind: PersistentVolumeClaim
      metadata:
        name: {{ .Values.persistence.volumeName }}
        labels:
          {{- include "postgresql.labels" . | nindent 10 }}
        {{- if .Values.persistence.annotations }}
        annotations:
          {{- toYaml .Values.persistence.annotations | nindent 10 }}
        {{- end }}
      spec:
        accessModes:
          {{- range .Values.persistence.accessModes }}
          - {{ . | quote }}
          {{- end }}
        resources:
          requests:
            storage: {{ .Values.persistence.size | quote }}
        {{- if .Values.persistence.storageClass }}
        {{- if (eq "-" .Values.persistence.storageClass) }}
        storageClassName: ""
        {{- else }}
        storageClassName: {{ .Values.persistence.storageClass | quote }}
        {{- end }}
        {{- end }}
        {{- if .Values.persistence.selector }}
        selector:
          {{- toYaml .Values.persistence.selector | nindent 10 }}
        {{- end }}
  {{- else if .Values.persistence.existingClaim }}
  # Note: when using existingClaim, you need to manually bind the PVC to the StatefulSet
  {{- end }}
