apiVersion: v1
kind: ConfigMap
metadata:
  name: {{ .Release.Name }}-config
data:
  run.sh: |
    #!/bin/bash

    # Exit when any command fails
    set -e

    RANCHER_HOST={{ .Values.rancherHost }}

    apt-get update;
    apt-get install -y jq;
    apt-get install -y curl;
    curl -LO https://dl.k8s.io/release/v1.25.0/bin/linux/amd64/kubectl;
    chmod +x ./kubectl;
    curl -LO https://github.com/mikefarah/yq/releases/download/v4.27.5/yq_linux_amd64;
    chmod +x ./yq_linux_amd64;
    mv ./yq_linux_amd64 yq;

    if [ -z "$RANCHER_API_TOKEN" ]; then
      echo "RANCHER_API_TOKEN is not set"
      exit 1
    fi

    while true; do
      mkdir -p clusters;
      # rm clusters/*secret.yaml || true;
      
      # Get our list of clusters
      CLUSTERS=$(curl -s -k -u $RANCHER_API_TOKEN $RANCHER_HOST/v3/clusters | jq -r '.data')

      CLUSTERNAMES=$(echo $CLUSTERS | jq -r '.[].name')
      echo "Found clusters: $CLUSTERNAMES"

      # Loop through each cluster
      for CLUSTERNAME in $CLUSTERNAMES; do
        echo "Processing cluster: $CLUSTERNAME"
        FULLCLUSTERNAME=$CLUSTERNAME
        CLUSTERID=$(echo $CLUSTERS | jq -r --arg FULLCLUSTERNAME "$FULLCLUSTERNAME" '.[] | select(.name == $FULLCLUSTERNAME) | .id')
        CLUSTERCA=$(echo $CLUSTERS | jq -r --arg FULLCLUSTERNAME "$FULLCLUSTERNAME" '.[] | select(.name == $FULLCLUSTERNAME) | .caCert')
        CLUSTERLABELS=$(echo $CLUSTERS | jq -r --arg FULLCLUSTERNAME "$FULLCLUSTERNAME" '.[] | select(.name == $FULLCLUSTERNAME) | .labels | with_entries( select(.key|contains("{{ .Values.labelDomain }}/")))')
        CLUSTERREALM=$(echo $CLUSTERS | jq -r --arg FULLCLUSTERNAME "$FULLCLUSTERNAME" '.[] | select(.name == $FULLCLUSTERNAME) | .labels | ."{{ .Values.labelDomain }}/realm"')
        CLUSTERENVIRONMENT=$(echo $CLUSTERS | jq -r --arg FULLCLUSTERNAME "$FULLCLUSTERNAME" '.[] | select(.name == $FULLCLUSTERNAME) | .labels | ."{{ .Values.labelDomain }}/environment"')
        
        SHORTCLUSTERNAME=$(echo $CLUSTERS | jq -r --arg CLUSTERNAME "$CLUSTERNAME" '.[] | select(.name == $CLUSTERNAME) | .labels | ."{{ .Values.labelDomain }}/cluster_name"')

        if [ $CLUSTERENVIRONMENT != "{{ .Values.targetEnvironment }}" ]; then
          echo "Skipping non-{{ .Values.targetEnvironment }} cluster" $FULLCLUSTERNAME

          continue
        fi

        echo "Creating secret for $FULLCLUSTERNAME"
        # Create the secret
        cat > clusters/$FULLCLUSTERNAME-secret.yaml <<EOF
    apiVersion: v1
    kind: Secret
    metadata:
      name: argocd-$SHORTCLUSTERNAME-cluster
      namespace: argocd
      labels:
        argocd.argoproj.io/secret-type: cluster
        {{ .Values.labelDomain }}/full-cluster-name: $FULLCLUSTERNAME
        {{ .Values.labelDomain }}/cluster-id: $CLUSTERID
        {{ .Values.labelDomain }}/environment: $CLUSTERENVIRONMENT
        cluster: $SHORTCLUSTERNAME
        name: $SHORTCLUSTERNAME
        environment: $CLUSTERENVIRONMENT
    $(echo $CLUSTERLABELS | ./yq -P | sed 's/^/    /' | sed -e 's/{}//')
    type: Opaque
    stringData:
      name: "$SHORTCLUSTERNAME"
      server: "$RANCHER_HOST/k8s/clusters/$CLUSTERID"
      config: |
        {
          "bearerToken": "$RANCHER_API_TOKEN",
          "tlsClientConfig": {
            "insecure": false
          }
        }
    EOF
      done;
      ./kubectl apply -f clusters;

      sleep 60;
    done
---
apiVersion: v1
kind: Secret
metadata:
  name: {{ .Release.Name }}-api-token
type: Opaque
stringData:
  RANCHER_API_TOKEN: {{ .Values.rancherApiToken }} 
